{"title":"<br><br>Stratification and samplingÔ∏è of population centers in Loreto, Peru üé≤‚ú®","markdown":{"yaml":{"title":"<br><br>Stratification and samplingÔ∏è of population centers in Loreto, Peru üé≤‚ú®","number-sections":true,"format":{"html":{"code-fold":true,"code-summary":"Show code","toc":true}},"editor":"visual","css":"css/methodology.css","bibliography":"references/references.bib"},"headingText":"Introduction","headingAttr":{"id":"intro","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\nThis document describes the methodology carried out for the stratification and selection of population centers in Loreto for drone surveillance. This activity is part of the the *Harmonize project: Harmonisation of spatio-temporal multi-scale data for health in climate change hotspots in the Peruvian Amazon* (SIDISI 209821), in collaboration with the Barcelona Supercomputing Center.\n\nThe Harmonize project has the following objectives:\n\n1)  Geo-location of cases collected by passive surveillance from the Peruvian Ministry of Health (MINSA) through the Center for Disease Control and Prevention (CDC-Peru) in the study area using GPS devices.\n\n2)  Identify potential mosquito breeding sites based on new longitudinal ground survey data and using drone surveillance.\n\n3)  Collect data from weather stations, satellite imagery, ambient acoustic sounds and air pollution to calibrate and reduce the spatial resolution of Earth observation data sets.\n\n4)  Determine the impact of the use of these new technologies on infectious disease reduction interventions carried out by the Direcci√≥n Regional de Salud (DIRESA) of Loreto.\n\nThe methodology described here corresponds to the second objective above. Since we cannot map the whole study area of Loreto, our approach was to characterize the population centers in Loreto according to the incidence of relevant diseases in the area (Malaria, Dengue and Leptospirosis) and meteorological, environmental and human intervention variables and then use this variables to create sampling strata using clustering techniques. Finally, we randomly sampled a number of the population centers from each stratum proportional to the stratum size.\n\n## Dataset {#dataset}\n\nFor each population center, we gathered records on the following fields:\n\n-   UBIGEOCP, which is the official identification code of the population centers used by the Instituto Nacional de Estad√≠stica e Inform√°tica (INEI).\n-   Official name.\n-   Latitude and longitude.\n-   2022 cumulative incidence of Malaria, Dengue and Leptospirosis.\n-   Difference in the cumulative incidence of Malaria between 2010 and 2019.\n-   Mean and difference of the annual mean values of the years 2010 and 2021 of the following variables:\n    -   Precipitation accumulation (mm),\n    -   Runoff (mm),\n    -   Soil moisture (mm),\n    -   Maximum temperature (¬∞C),\n    -   Minimum temperature (¬∞C),\n    -   Total evapotranspiration (kg/m^2^),\n    -   Specific humidity (kg/kg),\n    -   Deforestation area (km^2^).\n-   Mean and difference of the annual values of the years 2010 and 2020 of the following variables:\n    -   Population density from WorldPop and\n    -   Human settlement data from the Global Human Settlement Layer (GHSL).\n-   Mean and difference of the annual mean values from years 2014 and 2021 of the nighttime data from the Visible Infrared Imaging Radiometer Suite (VIIRS).\n\nWe can take a look at the data in the following table:\n\n```{r}\n#| warning: false\n#| message: false\n\n# Load necessary packages\nlibrary(dplyr)\nlibrary(factoextra)\nlibrary(cluster)\nlibrary(leaflet)\n\n# Read dataset\nprocessed_path = \"data/processed/\"\nfile_name = \"ccpp-10km.csv\"\nfile_path = fs::path(processed_path, file_name)\nccpp = readr::read_csv(file_path, col_types = \"ccccccddcd\")\n\n# Display dataset\nccpp %>%\n  mutate(across(where(is.numeric), ~ round(.x, 2))) %>%\n  DT::datatable(\n    options = list(display = \"compact\", pageLength = 5, scrollX = TRUE)\n  )\n```\n\n## Stratification\n\nThe stratification of the population centers consisted of using the meteorological, environmental and human intervention variables to built groups of population centers with homogeneous characteristics. For this purpose, we tested two approaches. The first one consisted of performing an Agglomerative (\"bottom-up\") Hierarchical Clustering (AHC) analysis using different distances, linkage methods, and number of clusters selection methods. On the second one, we used Principal Component Analysis (PCA) to reduce the dimension of the variables to one principal dimension and used it's scores to create groups by quantile classification.\n\n### Agglomerative hierarchical clustering analysis\n\nThe AHC analysis consisted of two steps. First, we run several configurations the agglomerative nesting algorithms and selected the one which gave us the best hierarchical clustering (HC) structure. Secondly, from the selected hierarchical clustering structure, we calculated and examined a number of indices for determining the most appropriate number of clusters.\n\n#### Chosing the hierarchical clustering structure\n\nFor this first step, we tested combinations of the following methods:\n\n-   Scaling method: Whether to use normalization (scaling from 0 to 1) or standardadization (subtracting the mean and dividing by the standard deviation).\n-   Distance: Whether to use euclidean distance or correlation-based distances, such as Pearson or Spearman correlation.\n-   Linkage method: Whether to use average, single, complete, Ward or weighted average linkage method.\n\nFor each combination, we run the agglomerative nesting algorithm and calculated the *agglomerative coefficient* (AC) which is a measure of the strength of the HC structure [@boehmke2019hands, pp. 421-422]. For the 3 combinations of methods with larger AC, we also examined the resulting dendograms.\n\n```{r}\n# Select variables for analysis\nvariables = select(ccpp, dengue:malaria_diff)\n\n# Function to scale data either by standardization or normalization\nscale_data = function(data, method) {\n  if (method == \"standardization\") {\n    data_scaled = mutate(data, across(everything(), ~as.numeric(scale(.x))))\n  } \n  if (method == \"normalization\") {\n    data_scaled = mutate(data, across(everything(), scales::rescale))\n  }\n  data_scaled\n}\n\n# Listing the configurations for the scaling, distance and linkage methods\nscaling_method = c(\"standardization\", \"normalization\")\ndist_method = c(\"euclidean\", \"pearson\", \"spearman\")\nlinkage_method = c(\"average\", \"single\", \"complete\", \"ward\", \"weighted\")\n\n# Table with all the combinations\ndesign = tidyr::expand_grid(scaling_method, dist_method, linkage_method, variables)\n\n# Calculate the agglomerative coefficient for each combination\nagglomerative_coeff = design %>% \n  tidyr::nest(data = -c(scaling_method, dist_method, linkage_method)) %>% \n  mutate(\n    scaling = purrr::map2(data, scaling_method, ~scale_data(.x, method = .y)),\n    dist_mat = purrr::map2(scaling, dist_method, ~get_dist(.x, method = .y)),\n    tree = purrr::map2(dist_mat, linkage_method, ~agnes(.x, method = .y)),\n    ac = purrr::map(tree, ~.x$ac)\n  ) %>% \n  tidyr::unnest(ac) %>% \n  arrange(-ac)\n```\n\nThe best 3 HC structures according to the AC were the following:\n\n```{r}\n# Display the best 3 structures \nagglomerative_coeff %>% \n  slice_head(n = 3) %>% \n  select(-c(data, scaling, dist_mat, tree)) %>% \n  mutate(across(where(is.character), stringr::str_to_title)) %>% \n  mutate(across(where(is.numeric), ~round(.x, 4))) %>% \n  DT::datatable(\n    colnames = c(\"Scaling\", \"Distance\", \"Linkage\", \"AC\"),\n    options = list(dom = 't')\n  )\n```\n\n<br>\n\nThe difference of the first 3 AC values are almost negligible. Consequently, we examined the dendograms:\n\n```{r}\n# Function to plot a dendogram\ndendogram = function(row, title) {\n  dendogram <- fviz_dend(agglomerative_coeff$tree[[row]], main = title) + \n    theme(text = element_text(size = 13))\n  \n  dendogram\n}\n```\n\n::: panel-tabset\n##### HC structure 1\n\n```{r}\n#| warning: false\n#| message: false\n\ndendogram(1, \"Normalization, Pearson correlation, Ward linkage\")\n```\n\n##### HC structure 2\n\n```{r}\n#| warning: false\n#| message: false\n\ndendogram(2, \"Standardization, Spearman correlation, Ward linkage\")\n```\n\n##### HC structure 3\n\n```{r}\n#| warning: false\n#| message: false\n\ndendogram(3, \"Standardization, Pearson correlation, Ward linkage\")\n```\n:::\n\nAfter inspecting the dendograms, we chose the second HC structure as it seems to yield more homogeneous groups with relatively similar sizes for the different height values.\n\n### Determining the number of clusters\n\nWe calculated and plotted the Average silhouette width, Total within sum of squares and Gap statistic for a range of 1 to 10 number of clusters and examined the optimal number of cluster for each criteria. We defined a range of numbers of clusters that met or near met the optimal criteria and then for each one of them we used PCA to visualize the clusters in 2 dimensions to evaluate how well the groups were formed. In addition, the silhouette information of each observation was plotted to assess if there were observations that might have been misclustered.\n\n#### Evaluation of the criteria of the optimal number of clusters\n\n```{r}\n# Function to plot optimal number of clusters plot for a certain criteria\nnbclust_plot = function(data, method, ...) {\n  nbclust <- fviz_nbclust(\n    data, hcut, hc_func = \"agnes\", hc_method = \"ward.D2\", \n    c_metric = \"spearman\", method = method, ...\n  ) + theme(text = element_text(size = 13))\n  \n  nbclust\n}\n\n# Scale variables using standardization\nvariables_std = mutate(variables, across(everything(), ~as.numeric(scale(.x))))\n```\n\n::: panel-tabset\n##### Average silhouette width\n\n```{r}\nset.seed(2022)\nnbclust_plot(variables_std, \"silhouette\")\n```\n\n##### Total within sum of squares\n\n```{r}\nnbclust_plot(variables_std, \"wss\")\n```\n\n##### Gap statistic\n\n```{r}\nset.seed(2022)\nnbclust_plot(variables_std, \"gap_stat\", verbose = FALSE)\n```\n:::\n\nAccording to the average silhouette width, the optimal number of clusters is 5. In the total within sum of squares plot, we see an apparent elbow at 4 clusters. Finally, the Gap statistic tells us that the optimal number of clusters is 10 or more. However, we do not wanted to work with more than 5 clusters, 4 or 5 clusters would be the closest optimal.\n\n#### Clusters plots {#clusters-plots}\n\nNext, we plotted the clusters in a plane using PCA for 4 and 5 clusters.\n\n```{r}\n# Function to cut tree\ncut_tree = function(data, k) {\n  tree = hcut(\n    data, k = k, hc_func = \"agnes\", hc_method = \"ward.D2\", \n    hc_metric = \"spearman\", graph = TRUE\n  )\n  tree\n}\n\n# Function to generate cluster plot\ncluster_plot = function(tree) {\n  cluster = fviz_cluster(tree, ggtheme = theme_classic()) +\n    geom_vline(xintercept = 0, linetype = \"dashed\") +\n    geom_hline(yintercept = 0, linetype = \"dashed\") +\n    theme(text = element_text(size = 13))\n  \n  cluster\n}\n```\n\n::: panel-tabset\n##### 4 clusters\n\n```{r}\ntree_4 = cut_tree(variables_std, 4)\ncluster_plot(tree_4)\n```\n\n##### 5 clusters\n\n```{r}\ntree_5 = cut_tree(variables_std, 5)\ncluster_plot(tree_5)\n```\n\n:::\n\nWe can see that the fifth group is formed from some populated centers of clusters 2 and 3 in the 4-cluster graph.\n\n#### Individual silhouette widths\n\nNext, we plotted the individual silhouette width for the observations grouped 4 and 5 clusters.\n\n```{r}\n# Function to plot individual silhouette widths\nsilhouette_plot = function(tree) {\n  ind_silhouette <- tree %>%\n    fviz_silhouette(ggtheme = theme_classic(), print.summary = FALSE) +\n    theme(text = element_text(size = 13))\n  \n  ind_silhouette\n}\n```\n\n::: panel-tabset\n##### 4 clusters\n\n```{r}\nsilhouette_plot(tree_4)\n```\n\n##### 5 clusters\n\n```{r}\nsilhouette_plot(tree_5)\n```\n\n:::\n\nWe see that with 5 clusters we obtain a greater average silhouette width (0.44) than with 4 clusters (0.41). However, with 5 clusters with get greater negative values for some populated centers, indicating that they may be misclustered.\n\n#### HC groups on maps\n\nAs an additional step, for each number of clusters, we plotted the population centers (polygon centroids) on a map to see their spatial distribution.\n\n```{r}\n# Create table with the groups\nccpp_clusters = ccpp %>% \n  mutate(\n    hc_group_4 = as.factor(tree_4$cluster),\n    hc_group_5 = as.factor(tree_5$cluster)\n  )\n\n# Function to plot a map with the clusters\ncluster_map = function(data, palette, group_var) {\n  values = pull(data, {{group_var}})\n  \n  map = data %>% \n    sf::st_as_sf(coords = c(\"lng\", \"lat\"), crs = 4326) %>%\n    leaflet() %>% \n    addTiles(group = \"OpenStreetMap\") %>% \n    addProviderTiles(provider = providers$CartoDB, group = \"CartoDB\") %>%\n    addProviderTiles(\n      provider = providers$Esri.WorldImagery, group = \"Satelital\"\n    ) %>%\n    addCircleMarkers(\n      popup = ccpp$population_center, color = ~palette(values),\n      opacity = 1, radius = 0.1, fillOpacity = 0.5\n    )%>%\n    addLayersControl(\n      baseGroups = c(\"CartoDB\", \"OpenStreetMap\", \"Satelital\")\n    ) %>%\n    addLegend(\n      title = \"Cluster\", pal = palette, values = values, opacity = 1,\n      position = \"bottomright\"\n      )\n  map\n}\n```\n\n```{r echo=FALSE, eval=FALSE}\n#| echo: false\n#| eval: false\n# dataset_full = readr::read_csv(\n#   \"data/methodology/data/processed/db_variables.csv\",\n#   col_types = \"cccccccd\"\n# )\n# \n# dataset_mod = dataset_clustering %>%\n#   mutate(\n#     population_center = case_when(\n#       population_center == \"ZUNGARO COCHA\" ~ \"ZUNGAROCOCHA\",\n#       population_center == \"PAUJIL I ZONA\" ~ \"EL PAUJIL\",\n#       population_center == \"VARILLAL\" ~ \"EL VARILLAL\",\n#       population_center == \"VILLA CRUZ\" ~ \"VILLA PUERTO CRUZ\",\n#       population_center == \"HUAMBE\" ~ \"EL HUAMBE\",\n#       TRUE ~ population_center\n#     )\n#   ) %>% \n#   select(ubigeo, population_center, hc_group_4)\n# \n# dataset_visor = dataset_full %>% \n#   left_join(\n#     dataset_mod, by = c(\"NOMCP\" = \"population_center\")\n#   )\n# \n# clusters_path = fs::path(parent_path, \"data/processed/db_variables_clusters.csv\")\n# \n# readr::write_csv(dataset_visor, clusters_path, na = \"\")\n```\n\n::: panel-tabset\n##### 4 clusters\n\n```{r}\n#| warning: false\n#| message: false\n\n# Palette for 4 clusters\npalette_hc_4 = colorFactor(\n  palette = \"viridis\", domain = ccpp_clusters$hc_group_4\n)\n\n# Plot cluster map\ncluster_map(ccpp_clusters, palette_hc_4, hc_group_4)\n```\n\n##### 5 clusters\n\n```{r}\n#| warning: false\n#| message: false\n\n# Palette for 5 clusters\npalette_hc_5 = colorFactor(\n  palette = \"viridis\", domain = ccpp_clusters$hc_group_5\n)\n\n# Plot cluster map\ncluster_map(ccpp_clusters, palette_hc_5, hc_group_5)\n```\n\n:::\n\nWe see that the population centers seem to group, showing a strong spatial component driving the clustering. \n\n### Principal components analysis\n\nPrincipal component analysis (PCA) was used as an alternative method for clustering. Our approach was to use the principal component to build an aggregate index of all the variables considered. Then, the scores of the populated centers on this principal component were grouped into different categories according to the quantiles of the distribution. In order to compare this approach with the results of hierarchical clustering, we tested with 4 (25th, 50th and 75th quantiles) and 5 (20th, 40th, 60th and 80th quantiles) groups.\n\n```{r}\n# Perform PCA\npca = FactoMineR::PCA(variables_std, graph = FALSE)\n```\n\n#### Scree plot\n\nAfter having performed the PCA, we plotted the scree plot to check the percentage of explained variance each component or dimension.\n\n```{r}\npca %>% \n  fviz_screeplot() +\n  theme(text = element_text(size = 13))\n```\n\nWe see that the first component explain approximately 50% of the variance in the data. This is not such a high value, meaning that the variables do not seem to be strongly linearly correlated. Still, 50% is an acceptable value in practice.\n\n#### Contribution plot\n\nNext, we plotted the top 10 variables according to their contribution to the first component.\n\n```{r}\npca %>% \n  fviz_contrib(choice = \"var\", axes = 1, top = 10) +\n  theme(text = element_text(size = 13))\n```\n\nWe see that the soil moisture, precipitation and runoff variables are the ones that contribute the most to explaining the first component.\n\n#### PCA groups on maps\n\nFinally, we created the groups dividing the population centers according to the quantiles of the scores on the principal component. Then we plotted the population centers on maps for 2, 3 and 4 groups.\n\n```{r}\n# Get scores\npca_results = get_pca_ind(pca)\nscores = pca_results$coord\n\n# Create groups by quantile categorization\nccpp_strata = ccpp_clusters %>% \n  mutate(pca_score = scores[, 1]) %>% \n  mutate(\n    pca_group_4 = cut(\n      pca_score, breaks = quantile(pca_score, c(0, .25, .5, .75, 1)), \n      labels = as.character(rev(1:4)),\n      include.lowest = TRUE\n    ),\n    pca_group_5 = cut(\n      pca_score, breaks = quantile(pca_score, c(0, .2, .4, .6, .8, 1)), \n      labels = as.character(rev(1:5)),\n      include.lowest = TRUE\n    )\n  ) %>% \n  mutate(across(pca_group_4:pca_group_5, forcats::fct_rev))\n```\n\n::: panel-tabset\n##### 4 groups\n\n```{r}\n#| warning: false\n#| message: false\n\n# Palette for 4 groups\npalette_pca_4 = colorFactor(\n  palette = \"viridis\", domain = ccpp_strata$pca_group_4\n)\n\n# Plot cluster map\ncluster_map(ccpp_strata, palette_pca_4, pca_group_4)\n```\n\n##### 5 groups\n\n```{r}\n#| warning: false\n#| message: false\n\n# Palette for 5 groups\npalette_pca_5 = colorFactor(\n  palette = \"viridis\", domain = ccpp_strata$pca_group_5\n)\n\n# Plot cluster map\ncluster_map(ccpp_strata, palette_pca_5, pca_group_5)\n```\n\n:::\n\nGeographically, the PCA groups seem to be distributed very similar to the HC groups.\n\n### Comparing HC and PCA\n\nWe assessed how strong was the agreement between the HC method and PCA method on the grouping of the population centers for 4 and 5 groups. Confusion matrices and the Kappa statistic were used for this analysis.\n\n#### Confusion matrices\n\n::: panel-tabset\n##### 4 groups\n\n```{r}\nccpp_strata %>% \n  yardstick::conf_mat(hc_group_4, pca_group_4, dnn = c(\"PCA\", \"HC\")) %>% \n  autoplot(type = \"heatmap\") +\n  theme(text = element_text(size = 13))\n```\n\n##### 5 groups\n\n```{r}\nccpp_strata %>% \n  yardstick::conf_mat(hc_group_5, pca_group_5, dnn = c(\"PCA\", \"HC\")) %>% \n  autoplot(type = \"heatmap\") +\n  theme(text = element_text(size = 13))\n```\n\n:::\n\n```{r}\n# Get kappa statistic\nkap_4 = yardstick::kap(ccpp_strata, hc_group_4, pca_group_4)\nkap_5 = yardstick::kap(ccpp_strata, hc_group_5, pca_group_5)\n```\n\nFrom the confusion matrices it is evident a moderate agreement between the HC method and the PCA method. The agreement is stronger with 4 groups (kappa = `r round(kap_4$.estimate, 2)`) than with and 5 (kappa = `r round(kap_5$.estimate, 2)`).\n\nIn summary, both 4 and 5 groups give very similar results in terms of visual and statistical indicators. However, we ultimately opted to work with 4 clusters to avoid an excessive disaggreation of populated centers.\n\n```{r}\n#| echo: false\n#| eval: false\nccpp_path = fs::path(processed_path, \"ccpp-10km-strata.csv\")\nccpp_strata %>% \n  select(c(ubigeo:malaria_diff, hc_group_4)) %>% \n  readr::write_csv(ccpp_path)\n```\n\n## Selection of populated centers\n\nHaving chosen the number of clusters, we determined the number of population centers we should select from each one of them to obtain a sample of 10 population centers with the same proportion of cases in each cluster.\n\n```{r}\n# Sample size for each cluster\nround(table(ccpp_strata$hc_group_4)/6)\n```\n\nTherefore, we needed to select roughly 3 populated centers from cluster 1 and 2 from each of the other ones.\n\nWe did not take a random sample approach since we had the following restraints:\n\n- The Direccion Regional de Salud de Loreto (DIRESA Loreto) selected 5 population centers that are of epidemiological interest.\n- We had previously conducted field work to collect georeferenced points to reconstruct the perimeter of 21 populated centers. This is work that would have to be done for all the communities selected for drone mapping. So, for the sake of convenience, it was better to select from these population centers whose perimeters we already had. \n\nConsquently, we took these 26 populated centers (5 from DIRESA Loreto, 21 from InnovaLab) as our sample frame. The 5 populated centers from DIRESA Loreto were a must and 4 of them were in cluster 1 and 1 in cluster 2, so from the InnovaLab collection we randomly sample 1 populated center from cluster 2 and 2 from clusters 3 and 4 to have a total sample size of 10.\n\n```{r}\n#| echo: false\n#| eval: false\n\n# Sample 10 population centers\n# set.seed(2022)\n# n_samples = c(2, 1, 2)\n# sampling_10_innova = dataset_strata %>% \n#   filter(group == \"INNOVALAB\", hc_group_4 != \"1\") %>% \n#   tidyr::nest(data = -hc_group_4) %>% \n#   mutate(\n#     sample = purrr::map2(data, n_samples, ~slice_sample(.x, n = .y))\n#   ) %>% \n#   select(hc_group_4, sample) %>% \n#   tidyr::unnest(sample) %>% \n#   relocate(hc_group_4, .after = hc_group_3)\n# \n# sampling_10_diresa = filter(dataset_strata, group == \"DIRESA\")\n# \n# sampling_10 = bind_rows(sampling_10_diresa, sampling_10_innova)\n\n# Sample 15 population centers\n# set.seed(2022)\n# n_samples = c(1, 4, 2, 3)\n# sampling_15_innova = dataset_strata %>% \n#   filter(group == \"INNOVALAB\") %>% \n#   tidyr::nest(data = -hc_group_4) %>% \n#   mutate(\n#     sample = purrr::map2(data, n_samples, ~slice_sample(.x, n = .y))\n#   ) %>% \n#   select(hc_group_4, sample) %>% \n#   tidyr::unnest(sample) %>% \n#   relocate(hc_group_4, .after = hc_group_3)\n# \n# sampling_15_diresa = filter(dataset_strata, group == \"DIRESA\")\n# sampling_15 = bind_rows(sampling_15_diresa, sampling_15_innova)\n# \n# sampling = bind_rows(sampling_10, sampling_15, .id = \"sampling\")\n# \n# sampling_filepath = fs::path(parent_path, \"ccpp-10km-sample.csv\")\n# readr::write_csv(sampling, sampling_filepath)\n```\n\n```{r}\n# Read the 26 populated centers previously selected\nraw_path = \"data/raw/\"\nccpp_previous_path = fs::path(raw_path, \"ccpp-perimeters-diresa.csv\")\nccpp_previous_ccpp = readr::read_csv(ccpp_previous_path, col_types = \"cccccccd\")\nccpp_previous_strata = filter(\n  ccpp_strata, ubigeocp %in% ccpp_previous_ccpp$UBIGEOCP\n)\n\n# Select from DIRESA Loreto selection\nccpp_sample_diresa = ccpp_previous_strata %>% \n  filter(group == \"DIRESA\")\n\n# Select from InnovaLab collection\nn_samples_innova = c(1, 2, 2)\nset.seed(2023)\nccpp_sample_innova = ccpp_previous_strata %>% \n  filter(group == \"INNOVALAB\", hc_group_4 != \"1\") %>% \n  tidyr::nest(data = -hc_group_4) %>% \n  mutate(\n    sample = purrr::map2(data, n_samples_innova, ~slice_sample(.x, n = .y))\n  ) %>% \n  select(hc_group_4, sample) %>% \n  tidyr::unnest(sample) %>% \n  relocate(hc_group_4, .before =  hc_group_5)\n\n# Final sample\nccpp_sample = bind_rows(ccpp_sample_innova, ccpp_sample_diresa)\n```\n\n```{r}\n#| echo: false\n#| eval: false\n# 15\n# set.seed(2022)\n# sample_15_group_1_innova = dataset_old %>% \n#   filter(group == \"INNOVALAB\", hc_group_4 == \"1\") %>% \n#   slice_sample(n = 1)\n# \n# sample_15_group_1_diresa = filter(dataset_old, group == \"DIRESA\", hc_group_4 == \"1\")\n# sample_15_group_1 = bind_rows(sample_15_group_1_innova, sample_15_group_1_diresa)\n# \n# sample_15_group_2_strata = dataset_strata %>% \n#   filter(\n#     hc_group_4 == \"2\",\n#     nomcp %in% c(\"SAN CARLOS\", \"VILLA EL BUEN PASTOR\")\n#   ) \n# \n# sample_15_group_2_old = filter(dataset_old, hc_group_4 == \"2\")\n# sample_15_group_2 = bind_rows(sample_15_group_2_strata, sample_15_group_2_old)\n# \n# set.seed(2022)\n# n_samples_15_old = c(3, 3)\n# sampling_15_group_34_old = dataset_old %>% \n#   filter(hc_group_4 %in% c(\"3\", \"4\")) %>% \n#   tidyr::nest(data = -hc_group_4) %>% \n#   mutate(\n#     sample = purrr::map2(data, n_samples_15_old, ~slice_sample(.x, n = .y))\n#   ) %>% \n#   select(hc_group_4, sample) %>% \n#   tidyr::unnest(sample) %>% \n#   relocate(hc_group_4, .after = hc_group_3)\n# \n# sampling_15_old = bind_rows(sample_15_group_1, sample_15_group_2, sampling_15_group_34_old)\n```\n\n```{r}\n#| echo: false\n#| eval: false\n# sampling_old = bind_rows(sampling_10_old, sampling_15_old, .id = \"sampling\")\n# \n# sampling_old_filepath = fs::path(parent_path, \"ccpp-10km-sample-old.csv\")\n# readr::write_csv(sampling_old, sampling_old_filepath)\n```\n\n```{r}\n#| echo: false\n#| eval: false\nccpp_sample_path = fs::path(processed_path, \"ccpp-10km-strata-sample.csv\")\nreadr::write_csv(ccpp_sample, ccpp_sample_path)\n```\n\nFinally, we plot the samples in a map to see their geographical distribution.\n\n```{r}\n#| warning: false\n#| message: false\n\n# Coordinates of all the population centers\nccpp_coord = ccpp_strata %>% \n  sf::st_as_sf(coords = c(\"lng\", \"lat\"))\n\n# Coordinates of the 10 samples\nccpp_sample_coord = ccpp_sample %>% \n  sf::st_as_sf(coords = c(\"lng\", \"lat\"))\n\n# Function to plot the samples on a map\nsample_map = function(data, palette, group_var) {\n  values = pull(data, {{group_var}})\n  map = data %>% \n    leaflet() %>% \n    addTiles(group = \"OpenStreetMap\") %>% \n    addProviderTiles(provider = providers$CartoDB, group = \"CartoDB\") %>%\n    addProviderTiles(\n      provider = providers$Esri.WorldImagery,group = \"Satelital\"\n    ) %>%\n    addCircleMarkers(\n      data = ccpp_coord, opacity = 1, radius = 0.1, fillOpacity = 0.5, \n      color = \"lightgray\"\n      ) %>% \n    addCircleMarkers(\n      popup = data$population_center, color = ~palette(values),\n      opacity = 1, radius = 0.1, fillOpacity = 0.5\n      )%>% \n    addLayersControl(baseGroups = c(\"CartoDB\",\"OpenStreetMap\", \"Satelital\")) %>% \n    addLegend(\n      title = \"Cluster\", pal = palette, values = values, opacity = 1,\n      position = \"bottomright\"\n    )\n  map\n}\n\n# Palette for the sample\nsample_palette = colorFactor(\n  palette = \"viridis\", domain = ccpp_sample$hc_group_4\n)\n\n# Map the samples\nsample_map(ccpp_sample, sample_palette, hc_group_4)\n```\n\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["css/style.css","css/methodology.css"],"toc":true,"number-sections":true,"output-file":"methodology.html"},"language":{"code-summary":"Show code"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","editor":"visual","theme":"cosmo","title":"<br><br>Stratification and samplingÔ∏è of population centers in Loreto, Peru üé≤‚ú®","bibliography":["references/references.bib"]},"extensions":{"book":{"multiFile":true}}}}}